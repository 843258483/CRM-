<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 对注解的扫描的@Component非这个3层, @Repository持久层, @Service业务逻辑层, @Controller控制器支持 -->
	<!-- <context:component-scan组件扫描 base-package="那个父包,另一个父包" /> -->
	<context:component-scan base-package="cn.itsource.crm" />

	<!-- jdbc.properties->dataSource->sqlSessionFactory->mapper(只有接口，映射器)->service->junit->controller -->
	<context:property-placeholder location="classpath:jdbc.properties" />


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
			p:password="${jdbc.password}">
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="150" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="20" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="30" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="10" />
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 -->
		<property name="maxWait" value="1000" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="10" />
		<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
		<property name="minEvictableIdleTimeMillis" value="10000" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 和ssh集成类似,加载映射文件 -->
		<property name="mapperLocations"
			value="classpath*:cn/itsource/crm/mapper/*Mapper.xml" />
		<!-- typeAliasesPackage : String,配置别名的包 -->
		<property name="typeAliasesPackage" value="cn.itsource.crm.domain,cn.itsource.crm.query" />
	</bean>

	<!-- 没有必要在 Spring 的 XML 配置文件中注册所有的映射器。相反,你可以使用一个 MapperScannerConfigurer 
		, -->
	<!-- 一劳永逸:配置一个,全部搞定 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 映射器接口的包在哪里,就配置哪里 -->
		<property name="basePackage" value="cn.itsource.crm.mapper" />
	</bean>

	<!-- mybatis的类名DataSourceTransactionManager，必须注入dataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
<!-- 		A.注解事务 -->
<!-- 		B.aop切入点 -->
		<aop:config>
			<aop:advisor pointcut="execution(* cn.itsource.crm.service.*.*(..))"
				advice-ref="txAdvice" />
		</aop:config>
		<!-- 事务方法：属性 -->
		<tx:advice id="txAdvice">
			<tx:attributes>
<!-- 				service层接口里面以get，find开头的方法都不需要事务管理，如果有事务都是只读 -->
				<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
				<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
<!-- 				其它方法全部由事务 -->
				<tx:method name="*" />
			</tx:attributes>
		</tx:advice>


	<!-- 系统日志配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.itsource.crm.service.*.*(..))" id="logPointCut"/>
		<aop:aspect ref="systemLogUtils">
			<aop:after method="writeLog" pointcut-ref="logPointCut"/>
		</aop:aspect>

	 

	</aop:config>

	

	<import resource="classpath:applicationContext-mvc.xml" />
</beans>